- name: Provision Python
  hosts: all
  gather_facts: no
  tasks:
    - name: Bootstrap Python
      raw: test -e /usr/bin/python || (apt-get -y update && apt-get install -y python-minimal)

- name: Create needed directories
  hosts: all
  gather_facts: no
  tasks:
    - name: Create the /setup-directory.
      file: path=/setup state=directory

- name: Install all needed packages
  hosts: all
  gather_facts: no
  tasks:
    - apt:
      name: "{{packages}}"
      update_cache: yes
      vars:
        packages:
          - cpanm
          - curl
          - git
          - libncurses5-dev
          - make
          - postgresql
          - postgresql-server-dev-10
          - g++
          - gcc
          - libc6-dev
          - libffi-dev
          - libgmp-dev
          - xz-utils
          - zlib1g-dev
          - gnupg

- name: Provision pgjwt
  hosts: all
  tasks:
    - git:
        repo: https://github.com/michelp/pgjwt.git
        dest: /setup/pgjwt
    - make:
        chdir: /setup/pgjwt
        target: install
    - name: Create the extension
      becomes: yes
      become_user: postgres
      shell: "CREATE EXTENSION IF NOT EXISTS pgcrypto; CREATE EXTENSION IF NOT EXISTS pgjwt;" | psql

- name: Provision Haskell Stack
  hosts: all
  tasks:
    - name: Download the Stack tarball.
      get_url:
        url: https://get.haskellstack.org/stable/linux-x86_64.tar.gz
        dest: /setup/stack-x86_64.tar.gz
    - name: Unpack the Stack tarball.
      unarchive:
        src: /setup/stack-x86_64.tar.gz
        dest: /setup
        remote_src: yes
    - name: Move the stack executable to path
      copy:
        src: /setup/stack-1.7.1-linux-x86_64/stack
        dest: /usr/local/bin
        remote_src: yes
        mode: 0755

- name: Install Postgrest
  hosts: all
  tasks:
    - name: Download Postgrest binary distribution
      get_url:
        url: https://github.com/PostgREST/postgrest/releases/download/v5.1.0/postgrest-v5.1.0-ubuntu.tar.xz
        dest: /setup
    - name: Unpack postgrest binary to /usr/local/bin
      unarchive:
        src: /setup/postgrest-v5.1.0-ubuntu.tar.xz
        dest: /usr/local/bin
        remote_src: yes

- name: Install postgres-websockets
  hosts: all
  tasks:
    - name: Clone postgres-websockets repository
      git:
        repo: https://github.com/diogob/postgres-websockets.git
        dest: /setup/postgres-websockets
    - name: Compile and install postgres-websockets
      shell: stack install --local-bin-path /usr/local/bin
      args:
        chdir: /setup/postgres-websockets

- name: Install pgtap and pg_prove
  hosts: all
  tasks:
    - name: Install pg_prove
      cpanm: pg_prove
    - name: Clone the pgtap repo
      git:
        repo: https://github.com/theory/pgtap.git
        dest: /setup/pgtap
    - name: pgtap - Run make
      make:
        chdir: /setup/pgtap
    - name: pgtap - Run make install
      make:
        chdir: /setup/pgtap
        target: install
    - name: Create the extension
      becomes: yes
      become_user: postgres
      shell: "CREATE EXTENSION IF NOT EXISTS pgtap;" | psql

- name: Compile Lemmingtools
  hosts: all
  tasks:
    - name: Clone Lemmingpants
      git:
        repo: https://github.com/Rembane/lemmingpants.git
        dest: /setup/lemmingpants
    - name: Compile and install lemmingtools
      shell: stack install --local-bin-path /usr/local/bin
      args:
        chdir: /setup/lemmingpants/lemmingtools

- name: Initialize the database
  hosts: all
  become: yes
  become_user: postgres
  tasks:
    - name: Create the Lemmingpants user
      shell: createuser -dP lemmingpants < lemmingpants
    - name: Create the Lemmingpants database
      shell: createdb -O lemmingpants lemmingpants
    - name: Set secret
      shell: |
          PATH=/setup/secret_key.txt
          if [ ! -f $PATH ]; then
            CHARS=abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789
            RESULT=""
            for _ in {1..50}; do
              RESULT=$RESULT${CHARS:RANDOM%${#CHARS}:1}
            done
            echo $RESULT > $PATH
          fi;
          KEY=`cat $PATH`
          psql -d lemmingpants < ALTER DATABASE lemmingpants SET "app.jwt_secret" TO "'$KEY'"
      args:
        creates: /setup/secret_key.txt
    - name: Upload SQL files (1)
      copy:
        src: init.sql
        dest: /setup/init.sql
    - name: Upload SQL files (2)
      copy:
        src: sql/
        dest: /setup/sql/
    - name: Fill the database with tables and stuff...
      becomes: yes
      become_user: lemmingpants
      shell: psql -d lemmingpants < init.sql
      args:
        chdir: /setup
